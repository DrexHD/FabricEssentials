import org.jetbrains.changelog.Changelog

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
    id 'maven-publish'
    id 'org.jetbrains.changelog' version '2.+'
}

archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url "https://jitpack.io" }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "modid" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Mod dependencies
    modImplementation include("me.lucko:fabric-permissions-api:${project.permission_api_version}")
    modImplementation include("eu.pb4:sgui:${project.sgui_version}")
    modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api_version}")
    modImplementation include("eu.pb4:player-data-api:${project.player_data_api_version}")
    modImplementation include("eu.pb4:common-protection-api:${project.common_protection_api_version}")
    modImplementation include("com.github.DrexHD:message-api:${project.message_api_version}")
}

publishMods {
    file = remapJar.archiveFile
    type = STABLE
    changelog = fetchChangelog()

    displayName = "Fabric Essentials ${version.get()}"
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "o69N0FT2"
        minecraftVersions.add(project.minecraft_version)
    }
    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

private String fetchChangelog() {
    def log = getChangelog.changelog.get()
    if (log.has(project.mod_version)) {
        return log.renderItem(
                log.get(project.mod_version).withHeader(false),
                Changelog.OutputType.MARKDOWN
        )
    } else {
        return ""
    }
}